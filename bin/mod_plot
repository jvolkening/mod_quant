#!/usr/bin/env perl

use strict;
use warnings;
use 5.012;

use BioX::Seq::Fetch;
use File::Which;
use Getopt::Long;
use List::MoreUtils qw/uniq/;
use List::Util qw/any sum/;
use Pod::Usage;

my $PROGRAM = 'mod_plot';
my $VERSION = 0.002;

my $GNUPLOT_BIN =
        which('gnuplot5')
     // which('gnuplot')
     // die "ERROR: gnuplot is required but not found\n";

# parse input parameters and config file
my $protein;
my $fn_fasta;
my $fn_quant;
my $order;
my $ylim       = 1.2;
my $label_psms = 0;
my $shade_psms = 0;
my $min_psms   = 0;
my $star_met   = 0;
my $min_coord;
my $max_coord;

GetOptions(
    'quant=s'     => \$fn_quant,
    'fasta=s'     => \$fn_fasta,
    'protein=s'   => \$protein,
    'order=s'     => \$order,
    'ylim=f'      => \$ylim,
    'label_psms'  => \$label_psms,
    'shade_psms'  => \$shade_psms,
    'min_psms=i'  => \$min_psms,
    'star_met'    => \$star_met,
    'min_coord=i' => \$min_coord,
    'max_coord=i' => \$max_coord,
    'help'        => sub{ pod2usage(-verbose => 2); },
    'version'     => sub{ print "This is $PROGRAM v$VERSION\n";exit; },
);

# parameter checking

die "Error reading protein sequence (did you provide a valid file using '--fasta'?)\n"
    if (! defined $fn_fasta || ! -r $fn_fasta);
die "Error reading quantification table (did you provide a valid file using '--quant'?)\n"
    if (! defined $fn_quant || ! -r $fn_quant);
die "Missing the required '--protein' parameter\n"
    if (! defined $protein);

my $seqs = BioX::Seq::Fetch->new($fn_fasta)
    or die "Error reading FASTA database: $@\n";
my $seq = $seqs->fetch_seq($protein)
    // die "failed to find $protein in FASTA database\n";
$seq = uc $seq;

open my $quant, '<', $fn_quant;
my $header = <$quant>;
chomp $header;
my @parts = split "\t", $header;
die "invalid header format\n" if $parts[0] ne '#peptide';
die "invalid header format\n" if $parts[1] ne 'protein';

my $fields;
my @samples;
my @n;

for (2..$#parts) {
    my $key = $parts[$_];
    my ($base, $n, $type) = ( $key =~ /^(.+)\.(\d+)\.(mean|sd|psms|quant)$/ );
    die "invalid header field: $key\n" if (! defined $type);
    push @samples, $base;
    push @n, $n if ($n > 0);
    $fields->{$n}->{$base}->{$type} = $_;
}

@n = sort {$a <=> $b} uniq @n;
@samples = uniq @samples;

# re-define sample order if explicitly given
if (defined $order) {
    my @samples_new = split ',', $order;

    # check that provided sample names are valid
    for my $sample (@samples_new) {
        die "ERROR: sample $sample listed in '--order' but not found in input file\n"
            if (! any {$_ eq $sample} @samples);
    }
    # warn about missing sample names
    for my $sample (@samples) {
        warn "WARNING: sample $sample found in input but not listed in '--order'\n"
            if (! any {$_ eq $sample} @samples_new);
    }

    @samples = @samples_new;
}

die "ERROR: zero samples found\n" if (scalar(@samples) < 1);

my $i = 0;
my @peptides;
my @blocks;
LINE:
while (my $line = <$quant>) {
    chomp $line;
    my @parts = split "\t", $line;
    next LINE if $parts[1] ne $protein;
    my $start;
    my $end;
    if ($seq =~ /$parts[0]/) {
        $start = $-[0] + 1; 
        $end = $+[0];
    }
    else {
        warn "WARNING: $parts[0] not found in protein\n";
        next LINE;
    }

    # check coordinate range
    next LINE if (defined $min_coord && $start < $min_coord);
    next LINE if (defined $max_coord && $end   > $max_coord);

    my $star = ($star_met && $parts[0] =~ /M/)
        ? '*'
        : '';
    my $name = "$start - $end$star";
    push @peptides, $name;

    my $id = '$h' . $i++;

    my $block;

    open my $stream, '>', \$block;

    say {$stream} "$id << EOD";
    say {$stream} join "\t", 'mods', @n, 'sum', 'sd', 'psms';

    my $tot_psms = 0;

    for my $sample (@samples) {
        my $psms = 0;
        my $sd   = 0;
        my @means;
        NMOD:
        for my $n (0, @n) {
            
            $psms += defined $fields->{$n}->{$sample}->{psms}
                ? @parts[ $fields->{$n}->{$sample}->{psms} ]
                : 0;
            next NMOD if ($n == 0);
            my $sdt = defined $fields->{$n}->{$sample}->{sd} 
                ? @parts[ $fields->{$n}->{$sample}->{sd} ]
                : 0;
            $sd += $sdt eq 'NA' ? 0 : $sdt;
            my $mu = defined $fields->{$n}->{$sample}->{mean}
                ? @parts[ $fields->{$n}->{$sample}->{mean} ]
                : 0;
            push @means, ($mu eq 'NA' ? 0 : $mu);
        }
        my $name = $sample;
        $name =~ s/_/\\\\_/g;
        $tot_psms += $psms;
        say {$stream} join "\t",
            $name,
            @means,
            sum(@means),
            $sd,
            $psms;
    }
    
    say {$stream} "EOD";

    close $stream;

    next LINE if ($tot_psms < $min_psms);

    push @blocks, [$start, $end, $id, $name, $block, $tot_psms];

}

die "ERROR: No valid peptides found to plot after all filtering applied\n"
    if (scalar(@blocks) < 1);

@blocks = sort {
        $a->[0] <=> $b->[0]
     || $a->[1] <=> $b->[1]
} @blocks;


open my $stream, '|-', $GNUPLOT_BIN
    or die "Error opening pipe to gnuplot: $!\n";

for (@blocks) {
    print {$stream} $_->[4];
}

my $n_samples = scalar @samples;
my $n_n = scalar(@n) + 1;
my $t = $n_n + 1;
my $s = $n_n + 2;
my $p = $n_n + 3;

my $width = ($n_samples * 20) * scalar(@blocks) + 155;
my $cb_x = ($width-60)/$width;
my $cb_w = 10/$width;

my @shading;
my @hists;
for my $j (0..$#blocks) {

    my $o = $j * ($n_samples + 1);
    my $o1 = $o - 1;
    my $o2 = $o + $n_samples;
    my $use_title = $j == 0 ? '' : 'notitle';
    my $bl = $blocks[$j];

    my $lbl_str = $label_psms
        ? ",  '' using (\$0+$o):(\$$t+\$$s+0.04):$p with labels left rotate notitle"
        : '';

    push @hists, <<"BLOCK"
newhistogram "{/:Bold*1.2 $bl->[3]}" lt 1, '$bl->[2]' using 2:xtic(1) $use_title \\
 noenhanced, for [i=3:$n_n] '' using i $use_title, '' using (\$0+$o):$t:$s with yerrorbars \\
 notitle pt 0 lc rgb '#000000' lw 1 $lbl_str, \\
BLOCK
;

    push @shading, "set arrow from $o2,0 to $o2,$ylim nohead lc rgb 'black'\n";
    if ($shade_psms) {
        my $k = $j + 1;
        my $f = $bl->[5]/100;
        $f = $f > 1 ? 1 : $f;
        push @shading, "set object $k rectangle from $o1,0 to $o2,$ylim fillcolor palette cb $bl->[5] lw 0 behind\n";
    }

}

my $cb_block = $shade_psms
    ? <<"BLOCK"
set colorbox user origin $cb_x,.2 size $cb_w,.2
set cblabel "# PSMs"
set cbrange [0:50]
BLOCK
    : '';

print {$stream} cmd();
print {$stream} $_ for (@shading);
print {$stream} "plot \\\n";
print {$stream} $_ for (@hists);

sub cmd {

return <<"CMD"
set terminal svg size $width,300 enhanced fname 'FreeSans'  fsize 11 name "percent_mod" butt solid

# line styles
set linetype 1 lw 1 lc rgb '#E41A1C' # red
set linetype 2 lw 1 lc rgb '#377EB8' # blue
set linetype 3 lw 1 lc rgb '#4DAF4A' # green
set linetype 4 lw 1 lc rgb '#984EA3' # purple
set linetype 5 lw 1 lc rgb '#FF7F00' # orange
set linetype 6 lw 1 lc rgb '#FFFF33' # yellow
set linetype 7 lw 1 lc rgb '#A65628' # brown
set linetype 8 lw 1 lc rgb '#F781BF' # pink

set palette defined (0 '#ffffff', 1 '#999999')
set pm3d implicit
unset colorbox

$cb_block

set bar 1.000000 front
set boxwidth 0.9 absolute
set style fill   solid 1.00 border lt -1
set key outside right top vertical Left reverse noenhanced title autotitle columnhead title "# mods" nobox
set style histogram rowstacked title textcolor lt -1
#set style textbox transparent margins  1.0,  1.0 border
unset logscale
set style data histograms
set xtics border in scale 0,0 nomirror rotate by -55 offset -1,0 autojustify
set ytics nomirror
set title "{/:Bold*1.2 Percent Modification}" 
set ylabel "{/:Bold*1.2 fraction modified}"
set yrange [0:$ylim] noreverse nowriteback
set datafile separator "\t"
set bars 1.0
set offset graph 0.0, graph 0.0, graph 0.0, graph 0.0
CMD
;

}


__END__

=head1 NAME

mod_plot - produce single-protein figure from output of mod_quant

=head1 SYNOPSIS

mod_plot --quant <quant_file> --fasta <fasta_file> --protein <protein_id> [options] > out.svg

=head1 DESCRIPTION

C<mod_plot> parses the output from C<mod_quant> and produces a plot of
modification ratios for a single protein or regions of a protein.

=head1 PREREQUISITES

Requires the following non-core Perl libraries:

=over 1

=item * BioX::Seq

=item * File::Which

=item * List::MoreUtils

=back

In addition, requires the following binaries installed on the system path:

=over 1

=item * gnuplot

=back

=head1 REQUIRED PARAMETERS

=over 4

=item B<--quant> I<filename>

Path to the tab-delimited output from C<mod_quant>

=item B<--fasta> I<filename>

Path to the FASTA file containing the sequence of the protein of interest

=item B<--protein>

The ID of the protein group of interest (note that this must EXACTLY match the
ID used in both the quantification file and the FASTA file indicated).

=back

=head1 OPTIONAL PARAMETERS

=over 4

=item B<--ylim> I<floating-point number>

The upper limit of the y-axis to use in plotting (the lower limit is always
set to zero). Default: 1.2.

=item B<--label_psms>

If given, the total number of PSMs contributing to each ratio will be added
as a label above the bar. Note that this value can be cut off depending on the
y-axis range, so some trial and error with the C<--ylim> parameter may be
necessary. See the C<--shade_psms> option for an alternative representation
that is less dependent on scaling.

=item B<--shade_psms>

If given, the background for each peptide subplot is shaded according to a
grayscale color spectrum in order to indicate the total number of PSMs
contributing to the quantification of that peptide. The value is summed for
all samples -- see C<label_psms> for an alternative representation that will
separates PSM count by sample.

=item B<--min_psms> I<postive integer>

The minimum total number of PSMs for a peptide required to plot that peptide.
Default: 1.

=item B<--star_met>

Indicate methionine-containing peptides with an asterisk after the peptide
coordinates. Default: false.

=item B<--min_coord> I<positive integer>

The minimum protein-level coordinate of peptides to plot (peptides starting
prior to this residue will be ignored). Default: 1.

=item B<--max_coord> I<positive integer>

The maximum protein-level coordinate of peptides to plot (peptides ending
after this residue will be ignored). Default: protein length.

=item B<--order> I<sample1,sample2,sample3,etc>

A comma-separated list of sample names. If given, the output will be
re-ordered according to this list. Use of this option is discouraged, as it is
fragile (names must match quantification file exactly) and sensitive to typos,
etc. It is recommended to use the facilities in C<mod_quant> to produce the
desired output order at that stage of analysis.  This option will likely be
removed in a future release. Default: input order.

=item B<--help>

Print usage summary and exit.

=item B<--version>

Print program version and exit.

=back

=head1 CAVEATS AND BUGS

Please submit bug reports to the issue tracker in the distribution repository.

=head1 AUTHOR

Jeremy Volkening (jdv@base2bio.com)

=head1 LICENSE AND COPYRIGHT

Copyright 2014-17 Jeremy Volkening

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

