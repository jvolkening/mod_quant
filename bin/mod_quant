#!/usr/bin/env perl

use strict;
use warnings;
use 5.012;

use Getopt::Long;
use List::Util qw/any sum/;
use List::MoreUtils qw/uniq/;
use Safe;
use YAML::Tiny;

my $PROGRAM = 'mod_quant';
my $VERSION = 0.001;

my $fn_config;
my $fn_names;
my $parse_names = 0;

my $cpt = new Safe;
$cpt->permit( qw/eq lt gt le ge/ );

my $sep = "\t";

# parse input parameters and config file

GetOptions(
    'config=s'        => \$fn_config,
    'sample_config=s' => \$fn_names,
    'parse_names'     => \$parse_names,
);

die "No configuration file specified!\n"
    if (! defined $fn_config);


# parse/validate config
my $cfg = YAML::Tiny->read($fn_config)
    or die "Error reading config file: $@\n";
$cfg = $cfg->[0];

my $max_mods = $cfg->{max_mods} // 1;

# build modification regex
my $mod_pick = join '|', @{ $cfg->{mod_strings} };
my $mod_re = qr/([A-Z])(\d+)\s*\(($mod_pick)\)/;

# remaining arguments should be data filenames
my @records = map { parse_file($_) } @ARGV;

@records    = collapse( @records );
my @samples = uniq map {$_->{sample}} @records;
my $quant   = aggregate( @records );
report($quant);

exit;

sub report {

    my ($quant) = @_;

    # parse/validate names

    my $names;

    # use config file if given
    if (defined $fn_names) {
        $names = YAML::Tiny->read($fn_names)
            or die "Error reading names file: $@\n";
        $names = $names->[0];
    }
    # otherwise try to parse filenames if asked
    elsif (defined $parse_names) {
        for (@samples) {
            if ($_ =~ /^(.+)[_\.\s]R\d+(?:\.\w{1,6})?$/) {
                push @{ $names->{$1} }, $_;
            }
        }
    }
    # otherwise just assume one replicate per sample
    else {
        $names = { map {$_ => $_} @samples };
    }

    my @samples = defined $names ? sort keys %$names : @samples;

    # header
    my @fields = ('#peptide', 'protein');
    for my $sample (@samples) {
        for my $n (0..$max_mods) {
            my @outputs = grep {$cfg->{output_fields}->{$_}} qw/mean sd psms quant/;
            push @fields, map {"$sample.$n.$_"} @outputs;
        }
    }
    say join $sep, @fields;

    # records
    for my $key (keys %$quant) {
       
        print $key;

        for my $sample (@samples) {

            my @ratios;

            my @replicates = @{ $names->{$sample} };

            for my $n (0..$max_mods) {

                my @v;
                my $psms = 0;
                my $area = 0;
    
                REPL:
                for my $repl (@replicates) {

                    my $r;

                    my $ref = $quant->{$key}->{$repl};
                    next REPL if (! defined $ref);
                    push @v, ($ref->{sums}->{$n} // 0) / $ref->{sums}->{all};
                    $area += $ref->{sums}->{$n} // 0;
                    $psms += $ref->{psms}->{$n} // 0;

                }

                my $mu = scalar(@v) > 0
                    ? sum(@v)/scalar(@v)
                    : 'NA';
                my $sd = scalar(@v) > 1
                    ? sqrt( (sum map {($_-$mu)**2} @v)/(scalar(@v)-1))
                    : 'NA';
               
                push @ratios, $mu    if ($cfg->{output_fields}->{mean} );
                push @ratios, $sd    if ($cfg->{output_fields}->{sd}   );
                push @ratios, $psms  if ($cfg->{output_fields}->{psms} );
                push @ratios, $area  if ($cfg->{output_fields}->{quant});

            }

            print $sep, join($sep, @ratios);

        }

        print "\n";

    }

}


sub collapse {

    my @records = @_;

    my $seen;

    for my $record (@records) {

        next if (! defined $record->{quant});

        my $tag = join '.',
            $record->{peptide},
            $record->{protein},
            $record->{quant},
            $record->{sample};

        if (defined $seen->{$tag}) {
            $seen->{$tag}->{psms} += 1;
            my $operator = $cfg->{rank_best} eq 'low'  ? '>='
                         : $cfg->{rank_best} eq 'high' ? '<='
                         : die "unknown rank_best: $cfg->{rank_best}\n";
            next if $cpt->reval( "$record->{rank} $operator $seen->{$tag}->{rank}" );
        }

        $record->{psms} = $seen->{$tag}->{psms} // 1;
        $seen->{$tag} = $record;
            
    }

    return values %$seen;

}

sub aggregate {

    my @records = @_;

    my $quant;
    my $samples;

    for my $record (@records) {
       
        my $n_mods = 0;
        while ($record->{mods} =~ /$mod_re/g) {
            ++$n_mods;
            # TODO: handle localized residues
        }
        $n_mods = $max_mods if ($n_mods > $max_mods);

        my $q = $record->{quant};
        my $s = $record->{sample};
        my $p = $record->{psms};

        my $key = join '',
            $record->{peptide},
            $sep,
            $record->{protein};

        $quant->{$key}->{$s}->{sums}->{all}     += $q;
        $quant->{$key}->{$s}->{sums}->{$n_mods} += $q;
        $quant->{$key}->{$s}->{psms}->{all}     += $p;
        $quant->{$key}->{$s}->{psms}->{$n_mods} += $p;

    }

    return $quant;

}
            
    

sub filter {

    my ($record) = @_;

    my $operators = {
        numeric => {
            eq => '==',
            lt => '<',
            gt => '>',
            le => '<=',
            ge => '>=',
        },
        string => {
            eq => 'eq',
            lt => 'lt',
            gt => 'gt',
            le => 'le',
            ge => 'ge',
        }
    };

    for my $filter (@{ $cfg->{filters} }) {

        my $match = 0;

        my $value = $record->{ $filter->{field} };
        die "No field found for key $filter->{field}\n"
            if (! defined $value);

        my $mode = $filter->{value} =~ /^[\d\.\-\+]+$/
            ? 'numeric'
            : 'string';

        my $operator = $operators->{$mode}->{ $filter->{comparison} }
            // die "Invalid comparison: $filter->{comparison}\n";

        my $is_match = $cpt->reval( "$value $operator $filter->{value}" );

        return 0 if (  $is_match && $filter->{type} eq 'exclude');
        return 0 if (! $is_match && $filter->{type} eq 'include');

    }

    # pass filter
    return 1;

}

sub parse_file {

    my ($fn) = @_;

    open my $data, '<', $fn
        or die "Error opening $fn: $!\n";

    # allow reading from gzipped files (with autodetect)
    #binmode $data, ":gzip(auto)";

    # parse header
    my $header = <$data>;
    my @keys = extract_fields($header);

    my @records;

    my $i = 0;

    RECORD:
    while (my $line = <$data>) {

        my @values = extract_fields($line);

        # handle case-insensitive fields
        if (defined $cfg->{ignore_case}) {
            for my $i (0..$#keys) {
                next if (! any {$keys[$i] eq $_} @{ $cfg->{ignore_case} });
                $values[$i] = uc $values[$i]
            }
        }


        my %record;
        @record{@keys} = @values;

        next RECORD if (! filter(\%record) );

        my %simple_record = (
            peptide => $record{ $cfg->{peptide_field}  },
            protein => $record{ $cfg->{protein_field}  },
            sample  => $record{ $cfg->{sample_field}   },
            mods    => $record{ $cfg->{mod_field}      },
            quant   => $record{ $cfg->{quant_field}    },
            rank    => $record{ $cfg->{rank_field}     },
        );

        push @records, \%simple_record;

    }

    return @records;

}


#----------------------------------------------------------------------------#
#----------------------------------------------------------------------------#

sub extract_fields {

    #splits line on tabs and removes wrapping quotes, if any

    my ($line) = @_;
    chomp $line;
    return map {
        $_ =~ s/^"//;
        $_ =~ s/"$//;
        $_;
    } split "\t", $line;

};

