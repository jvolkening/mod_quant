#!/usr/bin/env perl

use strict;
use warnings;
use 5.012;

use Getopt::Long;
use List::Util qw/any sum/;
use List::MoreUtils qw/uniq/;
use Safe;
use Pod::Usage;
use YAML::Tiny;

my $PROGRAM = 'mod_quant';
my $VERSION = 0.002;

my $fn_config;
my $fn_names;
my $parse_names = 0;
my $prefix;

my $cpt = new Safe;
$cpt->permit( qw/eq lt gt le ge/ );

my $sep = "\t";

# parse input parameters and config file

GetOptions(
    'config=s'        => \$fn_config,
    'sample_config=s' => \$fn_names,
    'parse_names'     => \$parse_names,
    'prefix=s'        => \$prefix,
    'help'            => sub{ pod2usage(-verbose => 2); },
    'version'         => sub{ print "This is $PROGRAM v$VERSION\n";exit; },
);

die "No configuration file specified!\n"
    if (! defined $fn_config);


# parse/validate config
my $cfg = YAML::Tiny->read($fn_config)
    or die "Error reading config file: $@\n";
$cfg = $cfg->[0];

for my $field (qw/
    peptide_field
    protein_field
    sample_field
    mod_field
    quant_field
    rank_field
    mod_strings
/) {
    die "$field not defined in config file\n" if (! defined $cfg->{$field});
}

my $max_mods = $cfg->{max_mods} // 1;

# build modification regex
my $mod_pick = join '|', @{ $cfg->{mod_strings} };
my $mod_re = qr/([A-Z])(\d+)\s*\(($mod_pick)\)/;

# remaining arguments should be data filenames
my @records = map { parse_file($_) } @ARGV;

@records    = collapse( @records );
my @samples = sort {$a cmp $b} uniq map {$_->{sample}} @records;
my $quant   = aggregate( @records );
report($quant);

exit;

sub report {

    my ($quant) = @_;

    # parse/validate names

    my $names;

    # use config file if given
    if (defined $fn_names) {
        $names = YAML::Tiny->read($fn_names)
            or die "Error reading names file: $@\n";
        $names = $names->[0];
    }
    # otherwise try to parse filenames if asked
    elsif ($parse_names) {
        my $i;
        for (@samples) {
            if ($_ =~ /^(.+)[_\.\s]R\d+(?:\.\w{1,6})?$/) {
                my $base = $1;
                $base =~ s/^$prefix// if (defined $prefix);
                $names->{$base}->{order} = $i++
                    if (! defined $names->{$base});
                push @{ $names->{$base}->{replicates} }, $_;
            }
        }
    }
    # otherwise just assume one replicate per sample
    else {
        $names = {
            map {
                my $base = $samples[$_];
                $base =~ s/^$prefix// if (defined $prefix);
                $base => {order => $_, replicates => [$samples[$_]]};
            } 0..$#samples
        };
    }

    my @samples = sort {
        $names->{$a}->{order} <=> $names->{$b}->{order}
    } keys %{$names};

    # header
    my @fields = ('#peptide', 'protein');
    for my $sample (@samples) {
        for my $n (0..$max_mods) {
            my @outputs = grep {$cfg->{output_fields}->{$_}} qw/mean sd psms quant/;
            die "ERROR: no output fields requested\n"
                if (scalar(@outputs) < 1);
            push @fields, map {"$sample.$n.$_"} @outputs;
        }
    }
    say join $sep, @fields;

    # records
    for my $key (keys %$quant) {
       
        print $key;

        for my $sample (@samples) {

            my @ratios;

            my @replicates = @{ $names->{$sample}->{replicates} };

            for my $n (0..$max_mods) {

                my @v;
                my $psms = 0;
                my $area = 0;
    
                REPL:
                for my $repl (@replicates) {

                    my $r;

                    my $ref = $quant->{$key}->{$repl};
                    next REPL if (! defined $ref);
                    push @v, ($ref->{sums}->{$n} // 0) / $ref->{sums}->{all};
                    $area += $ref->{sums}->{$n} // 0;
                    $psms += $ref->{psms}->{$n} // 0;

                }

                my $mu = scalar(@v) > 0
                    ? sum(@v)/scalar(@v)
                    : 'NA';
                my $sd = scalar(@v) > 1
                    ? sqrt( (sum map {($_-$mu)**2} @v)/(scalar(@v)-1))
                    : 'NA';
               
                push @ratios, $mu    if ($cfg->{output_fields}->{mean} );
                push @ratios, $sd    if ($cfg->{output_fields}->{sd}   );
                push @ratios, $psms  if ($cfg->{output_fields}->{psms} );
                push @ratios, $area  if ($cfg->{output_fields}->{quant});

            }

            print $sep, join($sep, @ratios);

        }

        print "\n";

    }

}


sub collapse {

    my @records = @_;

    my $seen;

    for my $record (@records) {

        next if (
            ! defined $record->{quant}
         || ! length  $record->{quant}
        );

        my $tag = join '.',
            $record->{peptide},
            $record->{protein},
            $record->{quant},
            $record->{sample};

        if (defined $seen->{$tag}) {
            $seen->{$tag}->{psms} += 1;
            my $operator = $cfg->{rank_best} eq 'low'  ? '>='
                         : $cfg->{rank_best} eq 'high' ? '<='
                         : die "unknown rank_best: $cfg->{rank_best}\n";
            next if $cpt->reval( "$record->{rank} $operator $seen->{$tag}->{rank}" );
        }

        $record->{psms} = $seen->{$tag}->{psms} // 1;
        $seen->{$tag} = $record;
            
    }

    return values %$seen;

}

sub aggregate {

    my @records = @_;

    my $quant;
    my $samples;

    for my $record (@records) {
       
        my $n_mods = 0;
        while ($record->{mods} =~ /$mod_re/g) {
            ++$n_mods;
            # TODO: handle localized residues
        }
        $n_mods = $max_mods if ($n_mods > $max_mods);

        my $q = $record->{quant};
        my $s = $record->{sample};
        my $p = $record->{psms};

        my $key = join '',
            $record->{peptide},
            $sep,
            $record->{protein};
        
        $quant->{$key}->{$s}->{sums}->{all}     += $q;
        $quant->{$key}->{$s}->{sums}->{$n_mods} += $q;
        $quant->{$key}->{$s}->{psms}->{all}     += $p;
        $quant->{$key}->{$s}->{psms}->{$n_mods} += $p;

    }

    return $quant;

}
            
    

sub filter {

    my ($record) = @_;

    my $operators = {
        numeric => {
            eq => '==',
            lt => '<',
            gt => '>',
            le => '<=',
            ge => '>=',
        },
        string => {
            eq => 'eq',
            lt => 'lt',
            gt => 'gt',
            le => 'le',
            ge => 'ge',
        }
    };

    for my $filter (@{ $cfg->{filters} }) {

        my $match = 0;

        my $value = $record->{ $filter->{field} };
        die "No field found for key $filter->{field}\n"
            if (! defined $value);

        my $mode = $filter->{value} =~ /^[\d\.\-\+]+$/
            ? 'numeric'
            : 'string';

        my $operator = $operators->{$mode}->{ $filter->{comparison} }
            // die "Invalid comparison: $filter->{comparison}\n";

        my $is_match = $cpt->reval( "$value $operator $filter->{value}" );

        return 0 if (  $is_match && $filter->{type} eq 'exclude');
        return 0 if (! $is_match && $filter->{type} eq 'include');

    }

    # pass filter
    return 1;

}

sub parse_file {

    my ($fn) = @_;

    open my $data, '<', $fn
        or die "Error opening $fn: $!\n";

    # allow reading from gzipped files (with autodetect)
    #binmode $data, ":gzip(auto)";

    # parse header
    my $header = <$data>;
    my @keys = extract_fields($header);

    # check for required fields
    for my $field (qw/
        peptide_field
        protein_field
        sample_field
        mod_field
        quant_field
        rank_field
    /) {
        die "Missing $field field $cfg->{$field} in data file $fn\n"
            if (! any {$_ eq $cfg->{$field}} @keys);
    }

    my @records;

    my $i = 0;

    RECORD:
    while (my $line = <$data>) {

        my @values = extract_fields($line);

        # handle case-insensitive fields
        if (defined $cfg->{ignore_case}) {
            for my $i (0..$#keys) {
                next if (! any {$keys[$i] eq $_} @{ $cfg->{ignore_case} });
                $values[$i] = uc $values[$i]
            }
        }

        my %record;
        @record{@keys} = @values;

        next RECORD if (! filter(\%record) );

        my %simple_record = (
            peptide => $record{ $cfg->{peptide_field}  },
            protein => $record{ $cfg->{protein_field}  },
            sample  => $record{ $cfg->{sample_field}   },
            mods    => $record{ $cfg->{mod_field}      },
            quant   => $record{ $cfg->{quant_field}    },
            rank    => $record{ $cfg->{rank_field}     },
        );

        push @records, \%simple_record;

    }

    return @records;

}


#----------------------------------------------------------------------------#
#----------------------------------------------------------------------------#

sub extract_fields {

    #splits line on tabs and removes wrapping quotes, if any

    my ($line) = @_;
    chomp $line;
    return map {
        $_ =~ s/^"//;
        $_ =~ s/"$//;
        $_;
    } split "\t", $line;

};


__END__

=head1 NAME

mod_quant - quantify peptide modifications from tab-delimited search results

=head1 SYNOPSIS

mod_quant --config config.yaml --sample_config samples.yaml <input_1.tsv> [<input_n.tsv>]

=head1 DESCRIPTION

C<mod_quant> parses tab-delimited output from an LC-MS/MS database search
containing quantification values and outputs ratios of peptide modifications
for the input samples.

=head1 PREREQUISITES

Requires the following non-core Perl libraries:

=over 1

=item * List::MoreUtils

=item * YAML::Tiny

=back

=head1 OPTIONS

=over 4

=item B<--config> I<filename>

Path to YAML file containing parsing configuration

=item B<--sample_config> I<filename>

Path to YAML file containing sample/replicate configuration

=item B<--parse_names>

If given, sample names will be parsed as follows:

=over 1

=item * suffixes (dot followed by 1-6 characters) are stripped

=item * the pattern "_Rn", where "n" is a positive integer, is looked for at
the end of the name. If found, it is stripped and the sample is assigned as
the "n"th replicate of the remaining sample name.

=back

As an example, the following name "experiment2_treated_R3.raw" would be parsed
as the 3rd replicate of sample "experiment2_treated".

This option is ignored if C<--sample_config> is specified.

=item B<--prefix>

If given, the prefix will be stripped from the beginning of sample names if
matching.

=item B<--help>

Print usage summary and exit.

=item B<--version>

Print program version and exit.

=back

=head1 CAVEATS AND BUGS

Please submit bug reports to the issue tracker in the distribution repository.

=head1 AUTHOR

Jeremy Volkening (jdv@base2bio.com)

=head1 LICENSE AND COPYRIGHT

Copyright 2014-17 Jeremy Volkening

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

